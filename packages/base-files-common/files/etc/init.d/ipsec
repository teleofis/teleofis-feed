#!/bin/sh /etc/rc.common

START=90
STOP=10

USE_PROCD=1
PROG=/usr/lib/ipsec/starter

. $IPKG_INSTROOT/lib/functions.sh

IPSEC_SECRETS_FILE=/etc/ipsec.secrets
IPSEC_CONN_FILE=/etc/ipsec.conf
STRONGSWAN_CONF_FILE=/etc/strongswan.conf
FIREWALL_FILE=/etc/firewall.user

IPSEC_VAR_SECRETS_FILE=/var/ipsec/ipsec.secrets
IPSEC_VAR_CONN_FILE=/var/ipsec/ipsec.conf
STRONGSWAN_VAR_CONF_FILE=/var/ipsec/strongswan.conf
FIREWALL_VAR_FILE=/var/ipsec/firewall.sh

file_reset() {
	: > "$1"
}

xappend() {
	local file="$1"
	shift

	echo "${@}" >> "${file}"
}

remove_include() {
	local file="$1"
	local include="$2"

	sed -i "\_${include}_d" "${file}"
}

remove_includes() {
	remove_include "${IPSEC_CONN_FILE}" "${IPSEC_VAR_CONN_FILE}"
	remove_include "${IPSEC_SECRETS_FILE}" "${IPSEC_VAR_SECRETS_FILE}"
	remove_include "${STRONGSWAN_CONF_FILE}" "${STRONGSWAN_VAR_CONF_FILE}"
	remove_include "${FIREWALL_FILE}" "${FIREWALL_VAR_FILE}"
}

do_include() {
	local conf="$1"
	local uciconf="$2"
	local backup=`mktemp -t -p /tmp/ ipsec-init-XXXXXX`

	[ ! -f "${conf}" ] && rm -rf "${conf}"
	touch "${conf}"

	cat "${conf}" | grep -v "${uciconf}" > "${backup}"
	mv "${backup}" "${conf}"
	xappend "${conf}" "include ${uciconf}"
	file_reset "${uciconf}"
}

ipsec_reset() {
	do_include "${IPSEC_CONN_FILE}" "${IPSEC_VAR_CONN_FILE}"
}

ipsec_xappend() {
	xappend "${IPSEC_VAR_CONN_FILE}" "$@"
}

swan_reset() {
	do_include "${STRONGSWAN_CONF_FILE}" "${STRONGSWAN_VAR_CONF_FILE}"
}

swan_xappend() {
	xappend "${STRONGSWAN_VAR_CONF_FILE}" "$@"
}

secret_reset() {
	do_include "${IPSEC_SECRETS_FILE}" "${IPSEC_VAR_SECRETS_FILE}"
}

secret_xappend() {
	xappend "${IPSEC_VAR_SECRETS_FILE}" "$@"
}

firewall_reset() {
	echo "${FIREWALL_VAR_FILE}" >> "${FIREWALL_FILE}"
}

firewall_xappend() {
	xappend "${FIREWALL_VAR_FILE}" "$@"
	chmod +x "${FIREWALL_VAR_FILE}"
}

warning() {
	echo "WARNING: $@" >&2
}

keep_alive () {
	local address
	local period
	local keep_enabled
	local iface

	config_get keep_enabled "$1" keep_enabled "0"

	if [ "$keep_enabled" -eq 1 ]; then
		config_get address	"$1"	ping_ipaddr
		config_get period	"$1"	ping_period
		iface=`uci get -q network.lan.ipaddr`

		/sbin/keep_alive.sh $address $period $iface &
	fi
}

add_crypto_proposal() {
	local encryption_algorithm
	local hash_algorithm
	local dh_group

	config_get encryption_algorithm  "$1" encryption_algorithm
	config_get hash_algorithm        "$1" hash_algorithm
	config_get dh_group              "$1" dh_group

	[ -n "${encryption_algorithm}" ] && \
		crypto="${crypto:+${crypto},}${encryption_algorithm}${hash_algorithm:+-${hash_algorithm}}${dh_group:+-${dh_group}}"
}

set_crypto_proposal() {
	local conf="$1"
	local proposal

	crypto=""

	config_get crypto_proposal "$conf" crypto_proposal ""
	for proposal in $crypto_proposal; do
		add_crypto_proposal "$proposal"
	done

	[ -n "${crypto}" ] && {
		local force_crypto_proposal

		config_get_bool force_crypto_proposal "$conf" force_crypto_proposal

		[ "${force_crypto_proposal}" = "1" ] && crypto="${crypto}!"
	}

	crypto_proposal="${crypto}"
}

config_conn() {
	# Generic ipsec conn section shared by tunnel and transport
	local enabled
	local gateway
	local pre_shared_key
	local auth_method
	local mode
	local local_subnet
	local local_nat
	local local_sourceip
	local local_updown
	local local_firewall
	local remote_subnet
	local remote_sourceip
	local remote_updown
	local remote_firewall
	local ikelifetime
	local ikeletter
	local lifetime
	local letter
	local margintime
	local keyingtries
	local dpdaction
	local dpddelay
	local inactivity
	local keyexchange

	config_name=$1

	config_get_bool enabled "$1" enabled 0
	[ $enabled -eq 0 ] && return

	config_get gateway            "$1" right
	config_get pre_shared_key     "$1" psk_key
	config_get auth_method        "$1" authentication_method "psk"
	config_get local_id_type      "$1" leftidtype ""
	config_get local_identifier   "$1" leftid ""
	config_get remote_identifier  "$1" rightid ""
	config_get remote_id_type     "$1" rightidtype ""

	[ "$gateway" = "any" ] && remote_gateway="%any" || remote_gateway="$gateway"

	if [ "$local_id_type" == "fqdn" ]; then
		local_identifier="@$local_identifier"
	elif [ "$local_id_type" == "user_fqdn" ]; then
		local_identifier="@@$local_identifier"
	elif [ "$local_id_type" == "address" ]; then
		local_identifier="$local_identifier"
	fi

	if [ "$remote_id_type" == "fqdn" ]; then
		remote_identifier="@$remote_identifier"
	elif [ "$remote_id_type" == "user_fqdn" ]; then
		remote_identifier="@@$remote_identifier"
	elif [ "$remote_id_type" == "address" ]; then
		remote_identifier="$remote_identifier"
	fi

	[ -z "$local_identifier" ] && {
		local ipdest

		[ "$remote_gateway" = "%any" ] && ipdest="1.1.1.1" || ipdest="$remote_gateway"
		local_gateway=`ip route get $ipdest | awk -F"src" '/src/{gsub(/ /,"");print $2}'`
	}

	[ -n "$local_identifier" ] && secret_xappend -n "$local_identifier " || secret_xappend -n "$local_gateway "
	[ -n "$remote_identifier" ] && secret_xappend -n "$remote_identifier " || secret_xappend -n "$remote_gateway "

	secret_xappend ": PSK \"$pre_shared_key\""

	set_crypto_proposal "$1"
	ike_proposal="$crypto_proposal"

	ipsec_xappend ""

	config_get mode                     "$1"           mode "start"
	config_get local_subnet             "$1"           leftsubnet "0.0.0.0/0"
	config_get local_nat                "$1"           local_nat ""
	config_get local_sourceip           "$1"           local_sourceip ""
	config_get local_updown             "$1"           local_updown ""
	config_get local_firewall           "$1"           local_firewall "yes"
	config_get remote_subnet            "$1"           rightsubnet ""
	config_get remote_sourceip          "$1"           remote_sourceip ""
	config_get remote_updown            "$1"           remote_updown ""
	config_get remote_firewall          "$1"           remote_firewall ""
	config_get ikelifetime              "$1"           ikelifetime ""
	config_get ikeletter                "$1"           ikeletter ""
	config_get keylife                  "$1"           keylife ""
	config_get letter                   "$1"           letter ""
	config_get rekeymargin              "$1"           rekeymargin "3m"
	config_get keyingtries              "$1"           keyingtries "%forever"
	config_get dpdaction                "$1"           dpdaction ""
	config_get dpddelay                 "$1"           dpddelay "60s"
	config_get inactivity               "$1"           inactivity
	config_get keyexchange              "$1"           keyexchange ""
	config_get aggressive	            "$1"           aggressive "no"
	config_get ike_encryption_algorithm	"$1"           ike_encryption_algorithm
	config_get ike_authentication_algorithm	"$1"       ike_authentication_algorithm
	config_get ike_dh_group			    "$1"           ike_dh_group
	config_get esp_encryption_algorithm	"$1"           esp_encryption_algorithm
	config_get esp_hash_algorithm		"$1"           esp_hash_algorithm
	config_get esp_pfs_group		    "$1"           esp_pfs_group

	[ -n "$local_nat" ] && local_subnet=$local_nat

	ipsec_xappend "conn $1"
	ipsec_xappend "  left=%any"
	ipsec_xappend "  right=$remote_gateway"

	[ -n "$local_sourceip" ] && ipsec_xappend "  leftsourceip=$local_sourceip"
	[ -n "$local_subnet" ] && ipsec_xappend "  leftsubnet=${local_subnet//\ /,}"

	[ -n "$local_firewall" ] && ipsec_xappend "  leftfirewall=$local_firewall"
	[ -n "$remote_firewall" ] && ipsec_xappend "  rightfirewall=$remote_firewall"

	ipsec_xappend "  authby=secret"
	ipsec_xappend "  closeaction=restart"
	ipsec_xappend "  type=tunnel"
	ipsec_xappend "  ikelifetime=$ikelifetime$ikeletter"
	ipsec_xappend "  keylife=$keylife$letter"
	ipsec_xappend "  margintime=$margintime"
	ipsec_xappend "  keyingtries=$keyingtries"
	ipsec_xappend "  dpdaction=$dpdaction"
	ipsec_xappend "  dpddelay=$dpddelay"
	ipsec_xappend "  aggressive=$aggressive"
	ipsec_xappend "  ike=$ike_encryption_algorithm-$ike_authentication_algorithm-$ike_dh_group"

	if [ "$esp_pfs_group" == "no_pfs" ]; then
		ipsec_xappend "  esp=$esp_encryption_algorithm-$esp_hash_algorithm"
	else
		ipsec_xappend "  esp=$esp_encryption_algorithm-$esp_hash_algorithm-$esp_pfs_group"
	fi

	[ -n "$inactivity" ] && ipsec_xappend "  inactivity=$inactivity"

	if [ "$auth_method" = "psk" ]; then
		ipsec_xappend "  leftauth=psk"
		ipsec_xappend "  rightauth=psk"

		[ "$remote_sourceip" != "" ] && ipsec_xappend "  rightsourceip=$remote_sourceip"
		[ "$remote_subnet" != "" ] && ipsec_xappend "  rightsubnet=${remote_subnet//\ /,}"
		for subnet in $remote_subnet; do
			command -v nft &>/dev/null
			if [[ "$?" -eq "0" ]]; then
				firewall_xappend "nft insert rule inet fw4 srcnat ip daddr $subnet counter accept"
			else
				firewall_xappend "iptables -t nat -A postrouting_rule -d $subnet -j ACCEPT"
			fi
		done
		ipsec_xappend "  auto=$mode"
	else
		warning "AuthenticationMethod $auth_method not supported"
	fi

	[ -n "$local_identifier" ] && ipsec_xappend "  leftid=$local_identifier"
	[ -n "$remote_identifier" ] && ipsec_xappend "  rightid=$remote_identifier"
	[ -n "$local_updown" ] && ipsec_xappend "  leftupdown=$local_updown"
	[ -n "$remote_updown" ] && ipsec_xappend "  rightupdown=$remote_updown"
	ipsec_xappend "  keyexchange=$keyexchange"

	set_crypto_proposal "$1"
	[ -n "${crypto_proposal}" ] && ipsec_xappend "  esp=$crypto_proposal"
	[ -n "${ike_proposal}" ] && ipsec_xappend "  ike=$ike_proposal"
	${FIREWALL_VAR_FILE}
	keep_alive "$1"
}

config_ipsec() {
	local debug
	local rtinstall_enabled
	local routing_tables_ignored
	local routing_table
	local routing_table_id
	local interface
	local device_list

	ipsec_reset
	secret_reset
	swan_reset
	firewall_reset

	ipsec_xappend "# generated by /etc/init.d/ipsec"
	ipsec_xappend "# version 2.2"
	ipsec_xappend ""

	secret_xappend "# generated by /etc/init.d/ipsec"

	config_get debug "$1" debug 0
	config_get_bool rtinstall_enabled "$1" rtinstall_enabled 1
	[ $rtinstall_enabled -eq 1 ] && install_routes=yes || install_routes=no

	# prepare extra charon config option ignore_routing_tables
	for routing_table in $(config_get "$1" "ignore_routing_tables"); do
		if [ "$routing_table" -ge 0 ] 2>/dev/null; then
			routing_table_id=$routing_table
		else
			routing_table_id=$(sed -n '/[ \t]*[0-9]\+[ \t]\+'$routing_table'[ \t]*$/s/[ \t]*\([0-9]\+\).*/\1/p' /etc/iproute2/rt_tables)
		fi

		[ -n "$routing_table_id" ] && append routing_tables_ignored "$routing_table_id"
	done

	swan_xappend "# generated by /etc/init.d/ipsec"
	swan_xappend "charon {"
	swan_xappend "  load_modular = yes"
	swan_xappend "  install_routes = $install_routes"
	[ -n "$routing_tables_ignored" ] && swan_xappend "  ignore_routing_tables = $routing_tables_ignored"
	swan_xappend "    plugins {"
	swan_xappend "      include /etc/strongswan.d/charon/*.conf"
	swan_xappend "    }"
	swan_xappend "  syslog {"
	swan_xappend "    identifier = ipsec"
	swan_xappend "    daemon {"
	swan_xappend "      default = $debug"
	swan_xappend "    }"
	swan_xappend "    auth {"
	swan_xappend "      default = $debug"
	swan_xappend "    }"
	swan_xappend "  }"
	swan_xappend "}"
}

prepare_env() {
	mkdir -p /var/ipsec
	remove_includes
	rm $IPSEC_VAR_SECRETS_FILE $IPSEC_VAR_CONN_FILE $STRONGSWAN_VAR_CONF_FILE $FIREWALL_VAR_FILE 2>/dev/null
	config_load ipsec
	config_foreach config_ipsec ipsec
	config_foreach config_conn conn
}

reload_service() {
	prepare_env
	if ipsec status > /dev/null 2>&1; then
		ipsec rereadall
		ipsec reload
	else
		ipsec start
	fi
}

service_triggers() {
	procd_add_reload_trigger "ipsec"
}

stop_service() {
	prepare_env
	ipsec_reset
	swan_reset
	secret_reset
}

start_service() {
	prepare_env

	procd_open_instance

	procd_set_param command $PROG --daemon charon --nofork

	procd_set_param file $IPSEC_CONN_FILE
	procd_append_param file $IPSEC_SECRETS_FILE
	procd_append_param file $STRONGSWAN_CONF_FILE
	procd_append_param file $FIREWALL_FILE
	procd_append_param file /etc/strongswan.d/*.conf
	procd_append_param file /etc/strongswan.d/charon/*.conf

	procd_set_param respawn

	procd_close_instance
}
